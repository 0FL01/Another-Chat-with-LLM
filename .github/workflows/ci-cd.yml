name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

env:
  DOCKER_IMAGE: 0fl01/another-chat-tg

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-asyncio
      - name: Run tests
        run: pytest --maxfail=1 --disable-warnings -q

  build-and-push:
    runs-on: ubuntu-24.04
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags and labels)
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: GITHUB_SHA, DOCKER_IMAGE
          script: |
            mkdir -p ${{ secrets.SERVICE_DIR }}
            cd ${{ secrets.SERVICE_DIR }}

            echo "Creating .env file..."
            cat > .env << 'EOL'
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
            TELEGRAM_TOKEN=${{ secrets.TELEGRAM_TOKEN }}
            OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
            MISTRAL_API_KEY=${{ secrets.MISTRAL_API_KEY }}
            HYPERBOLIC_API_KEY=${{ secrets.HYPERBOLIC_API_KEY }}
            TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY }}
            HF_API_KEY=${{ secrets.HF_API_KEY }}
            GH_TOKEN=${{ secrets.GH_TOKEN }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            ADMIN_ID=${{ secrets.ADMIN_ID }}
            PROMPT_IMPROVEMENT_SYSTEM_MESSAGE=${{ secrets.PROMPT_IMPROVEMENT_SYSTEM_MESSAGE }}
            SYSTEM_MESSAGE=${{ secrets.SYSTEM_MESSAGE }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            EOL
            echo ".env file created."

            echo "Creating docker-compose.yml file..."
            cat > docker-compose.yml << 'EOL'
            services:
              another_chat_tg:
                image: ${DOCKER_IMAGE:-0fl01/another-chat-tg}:${TAG:-latest}
                container_name: another_chat_tg
                network_mode: "host"
                environment:
                  - POSTGRES_HOST=127.0.0.1
                restart: unless-stopped
                volumes:
                  - ./.env:/app/.env:ro
                  - ./logs:/app/logs
            volumes:
              logs: {}
            EOL
            echo "docker-compose.yml file created."

            mkdir -p ./logs

            export TAG=${GITHUB_SHA}
            export DOCKER_IMAGE=${DOCKER_IMAGE}
            echo "Using Docker Image: ${DOCKER_IMAGE}:${TAG}"

            echo "Pulling Docker image..."
            docker compose pull
            echo "Image pulled."

            echo "Starting services with docker compose up..."
            docker compose up -d
            echo "Services started."

            echo "Current container status:"
            docker compose ps

            echo "Pruning unused Docker images..."
            docker image prune -a -f
            echo "Docker images pruned."